// Mocks generated by Mockito 5.0.15 from annotations
// in engineeringvazhikaatti/test/unit-tests/entrypoints/dashboard_api_test.dart.
// Do not manually edit this file.

import 'package:engineeringvazhikaatti/adapters/preferences.dart' as _i6;
import 'package:engineeringvazhikaatti/entities/app_config.dart' as _i8;
import 'package:engineeringvazhikaatti/entities/containers/list_container.dart'
    as _i13;
import 'package:engineeringvazhikaatti/entities/distance_option.dart' as _i19;
import 'package:engineeringvazhikaatti/entities/filter.dart' as _i5;
import 'package:engineeringvazhikaatti/entities/models/caste.dart' as _i10;
import 'package:engineeringvazhikaatti/entities/models/college_detail.dart'
    as _i11;
import 'package:engineeringvazhikaatti/entities/models/engg_branch.dart'
    as _i18;
import 'package:engineeringvazhikaatti/entities/results/available_branch.dart'
    as _i3;
import 'package:engineeringvazhikaatti/entities/results/available_college.dart'
    as _i2;
import 'package:engineeringvazhikaatti/entities/settings.dart' as _i7;
import 'package:engineeringvazhikaatti/stores/app_config_store.dart' as _i17;
import 'package:engineeringvazhikaatti/stores/available_colleges_store.dart'
    as _i12;
import 'package:engineeringvazhikaatti/stores/search_filter_store.dart' as _i14;
import 'package:engineeringvazhikaatti/usecases/location_updater.dart' as _i16;
import 'package:engineeringvazhikaatti/usecases/search_colleges_by_community_and_cutoff.dart'
    as _i9;
import 'package:engineeringvazhikaatti/usecases/settings_updater.dart' as _i15;
import 'package:engineeringvazhikaatti/usecases/sort_colleges.dart' as _i20;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeAvailableCollege_0 extends _i1.Fake implements _i2.AvailableCollege {
}

class _FakeAvailableBranch_1 extends _i1.Fake implements _i3.AvailableBranch {}

class _FakeBehaviorSubject_2<T> extends _i1.Fake
    implements _i4.BehaviorSubject<T> {}

class _FakeFilter_3 extends _i1.Fake implements _i5.Filter {}

class _FakePreferences_4 extends _i1.Fake implements _i6.Preferences {}

class _FakeSettings_5 extends _i1.Fake implements _i7.Settings {}

class _FakeAppConfig_6 extends _i1.Fake implements _i8.AppConfig {}

/// A class which mocks [SearchCollegesByCommunityAndCutoff].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchCollegesByCommunityAndCutoff extends _i1.Mock
    implements _i9.SearchCollegesByCommunityAndCutoff {
  MockSearchCollegesByCommunityAndCutoff() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.AvailableCollege> byBranchAndDistricts(
          List<String>? branchcodes,
          List<String>? districts,
          double? cutOff,
          _i10.CommunityGroup? communityGroup) =>
      (super.noSuchMethod(
          Invocation.method(#byBranchAndDistricts,
              [branchcodes, districts, cutOff, communityGroup]),
          returnValue: <_i2.AvailableCollege>[]) as List<_i2.AvailableCollege>);
  @override
  List<_i2.AvailableCollege> byBranchAndDistance(
          List<String>? branchcodes,
          double? cutOff,
          _i10.CommunityGroup? communityGroup,
          double? lat2,
          double? lon2,
          double? kms) =>
      (super.noSuchMethod(
          Invocation.method(#byBranchAndDistance,
              [branchcodes, cutOff, communityGroup, lat2, lon2, kms]),
          returnValue: <_i2.AvailableCollege>[]) as List<_i2.AvailableCollege>);
  @override
  bool within(double? kms, _i11.CollegeDetail? element, double? lat2,
          double? lon2) =>
      (super.noSuchMethod(
          Invocation.method(#within, [kms, element, lat2, lon2]),
          returnValue: false) as bool);
  @override
  _i2.AvailableCollege getAvailableCollegeWithBranches(
          _i11.CollegeDetail? collegeDetail,
          List<String>? branchcodes,
          _i10.CommunityGroup? communityGroup,
          double? cutOff) =>
      (super.noSuchMethod(
          Invocation.method(#getAvailableCollegeWithBranches,
              [collegeDetail, branchcodes, communityGroup, cutOff]),
          returnValue: _FakeAvailableCollege_0()) as _i2.AvailableCollege);
  @override
  List<_i3.AvailableBranch> getAvailableBranchesFrom(
          _i11.CollegeDetail? collegeDetail,
          List<String>? branchcodes,
          _i10.CommunityGroup? communityGroup,
          double? cutOff) =>
      (super.noSuchMethod(
          Invocation.method(#getAvailableBranchesFrom,
              [collegeDetail, branchcodes, communityGroup, cutOff]),
          returnValue: <_i3.AvailableBranch>[]) as List<_i3.AvailableBranch>);
  @override
  _i3.AvailableBranch getAvailableBranchFrom(
          _i11.CollegeDetail? collegeDetail,
          String? branchcode,
          _i10.CommunityGroup? communityGroup,
          double? cutOff) =>
      (super.noSuchMethod(
          Invocation.method(#getAvailableBranchFrom,
              [collegeDetail, branchcode, communityGroup, cutOff]),
          returnValue: _FakeAvailableBranch_1()) as _i3.AvailableBranch);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AvailableCollegesStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAvailableCollegesStore extends _i1.Mock
    implements _i12.AvailableCollegesStore {
  MockAvailableCollegesStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic sendData(List<_i2.AvailableCollege>? contents) =>
      super.noSuchMethod(Invocation.method(#send, [contents]));
  @override
  void sendLoading() => super.noSuchMethod(Invocation.method(#showLoading, []),
      returnValueForMissingStub: null);
  @override
  _i4.BehaviorSubject<_i13.ListContainer<_i2.AvailableCollege>> data() =>
      (super.noSuchMethod(Invocation.method(#data, []),
              returnValue: _FakeBehaviorSubject_2<
                  _i13.ListContainer<_i2.AvailableCollege>>())
          as _i4.BehaviorSubject<_i13.ListContainer<_i2.AvailableCollege>>);
  @override
  void testUpdate() => super.noSuchMethod(Invocation.method(#testUpdate, []),
      returnValueForMissingStub: null);
  @override
  void sendMessage(String? s) =>
      super.noSuchMethod(Invocation.method(#showError, [s]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SearchFilterStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchFilterStore extends _i1.Mock implements _i14.SearchFilterStore {
  MockSearchFilterStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get searchByDistrictsEnabled =>
      (super.noSuchMethod(Invocation.getter(#searchByDistrictsEnabled),
          returnValue: false) as bool);
  @override
  set searchByDistrictsEnabled(bool? _searchByDistrictsEnabled) =>
      super.noSuchMethod(
          Invocation.setter(
              #searchByDistrictsEnabled, _searchByDistrictsEnabled),
          returnValueForMissingStub: null);
  @override
  _i5.Filter get searchFilter =>
      (super.noSuchMethod(Invocation.getter(#searchFilter),
          returnValue: _FakeFilter_3()) as _i5.Filter);
  @override
  set searchFilter(_i5.Filter? _searchFilter) =>
      super.noSuchMethod(Invocation.setter(#searchFilter, _searchFilter),
          returnValueForMissingStub: null);
  @override
  _i4.BehaviorSubject<bool> searchByDistrictChanges() =>
      (super.noSuchMethod(Invocation.method(#searchByDistrictChanges, []),
              returnValue: _FakeBehaviorSubject_2<bool>())
          as _i4.BehaviorSubject<bool>);
  @override
  void send(_i5.Filter? searchFilter) =>
      super.noSuchMethod(Invocation.method(#send, [searchFilter]),
          returnValueForMissingStub: null);
  @override
  void setDistanceInKms(dynamic value) =>
      super.noSuchMethod(Invocation.method(#setDistanceInKms, [value]),
          returnValueForMissingStub: null);
  @override
  void setSearchByDistricts(dynamic value) =>
      super.noSuchMethod(Invocation.method(#setSearchByDistricts, [value]),
          returnValueForMissingStub: null);
  @override
  bool hasDistrictsSelected() =>
      (super.noSuchMethod(Invocation.method(#hasDistrictsSelected, []),
          returnValue: false) as bool);
  @override
  bool hasDistanceInKmsSelected() =>
      (super.noSuchMethod(Invocation.method(#hasDistanceInKmsSelected, []),
          returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SettingsUpdater].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsUpdater extends _i1.Mock implements _i15.SettingsUpdater {
  MockSettingsUpdater() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Preferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakePreferences_4()) as _i6.Preferences);
  @override
  _i7.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
      returnValue: _FakeSettings_5()) as _i7.Settings);
  @override
  set settings(_i7.Settings? _settings) =>
      super.noSuchMethod(Invocation.setter(#settings, _settings),
          returnValueForMissingStub: null);
  @override
  _i7.Settings getSettings() =>
      (super.noSuchMethod(Invocation.method(#getSettings, []),
          returnValue: _FakeSettings_5()) as _i7.Settings);
  @override
  void update(double? physics, double? chemistry, double? maths,
          _i10.CommunityGroup? communityGroup) =>
      super.noSuchMethod(
          Invocation.method(
              #update, [physics, chemistry, maths, communityGroup]),
          returnValueForMissingStub: null);
  @override
  bool hasAllData() => (super.noSuchMethod(Invocation.method(#hasAllData, []),
      returnValue: false) as bool);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LocationUpdater].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationUpdater extends _i1.Mock implements _i16.LocationUpdater {
  MockLocationUpdater() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Preferences get preferences =>
      (super.noSuchMethod(Invocation.getter(#preferences),
          returnValue: _FakePreferences_4()) as _i6.Preferences);
  @override
  bool hasLocation() => (super.noSuchMethod(Invocation.method(#hasLocation, []),
      returnValue: false) as bool);
  @override
  dynamic setLocation(double? lat, double? lon) =>
      super.noSuchMethod(Invocation.method(#setLocation, [lat, lon]));
  @override
  String toString() => super.toString();
}

/// A class which mocks [AppConfigStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppConfigStore extends _i1.Mock implements _i17.AppConfigStore {
  MockAppConfigStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.AppConfig get appConfig =>
      (super.noSuchMethod(Invocation.getter(#appConfig),
          returnValue: _FakeAppConfig_6()) as _i8.AppConfig);
  @override
  set appConfig(_i8.AppConfig? _appConfig) =>
      super.noSuchMethod(Invocation.setter(#appConfig, _appConfig),
          returnValueForMissingStub: null);
  @override
  List<_i18.EnggBranch> getBranches() =>
      (super.noSuchMethod(Invocation.method(#getBranches, []),
          returnValue: <_i18.EnggBranch>[]) as List<_i18.EnggBranch>);
  @override
  List<String> getDistricts() =>
      (super.noSuchMethod(Invocation.method(#getDistricts, []),
          returnValue: <String>[]) as List<String>);
  @override
  List<String> getPincodes() =>
      (super.noSuchMethod(Invocation.method(#getPincodes, []),
          returnValue: <String>[]) as List<String>);
  @override
  List<_i19.DistanceOption> getDistances() =>
      (super.noSuchMethod(Invocation.method(#getDistances, []),
          returnValue: <_i19.DistanceOption>[]) as List<_i19.DistanceOption>);
  @override
  List<_i18.EnggBranch> branchesFrom(String? contents) =>
      (super.noSuchMethod(Invocation.method(#branchesFrom, [contents]),
          returnValue: <_i18.EnggBranch>[]) as List<_i18.EnggBranch>);
  @override
  void loadBranches(String? contents) =>
      super.noSuchMethod(Invocation.method(#loadBranches, [contents]),
          returnValueForMissingStub: null);
  @override
  void loadDistricts(String? contents) =>
      super.noSuchMethod(Invocation.method(#loadDistricts, [contents]),
          returnValueForMissingStub: null);
  @override
  void loadPincodes(String? contents) =>
      super.noSuchMethod(Invocation.method(#loadPincodes, [contents]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [SortColleges].
///
/// See the documentation for Mockito's code generation for more information.
class MockSortColleges extends _i1.Mock implements _i20.SortColleges {
  MockSortColleges() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.AvailableCollege> sortByDistance(List<_i2.AvailableCollege>? results,
          String? branchCode, double? lat2, double? lon2) =>
      (super.noSuchMethod(
          Invocation.method(#sortByDistance, [results, branchCode, lat2, lon2]),
          returnValue: <_i2.AvailableCollege>[]) as List<_i2.AvailableCollege>);
  @override
  List<_i2.AvailableCollege> sortByRank(
          List<_i2.AvailableCollege>? results, String? branchCode) =>
      (super.noSuchMethod(Invocation.method(#sortByRank, [results, branchCode]),
          returnValue: <_i2.AvailableCollege>[]) as List<_i2.AvailableCollege>);
  @override
  List<_i2.AvailableCollege> sortBySortableBranch(
          List<_i2.AvailableCollege>? results) =>
      (super.noSuchMethod(Invocation.method(#sortBySortableBranch, [results]),
          returnValue: <_i2.AvailableCollege>[]) as List<_i2.AvailableCollege>);
  @override
  String toString() => super.toString();
}
